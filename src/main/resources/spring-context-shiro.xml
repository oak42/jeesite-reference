<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
		http://www.springframework.org/schema/context  http://www.springframework.org/schema/context/spring-context-4.1.xsd"
	default-lazy-init="true">

	<description>Shiro Configuration</description>

    <!-- 加载配置属性文件 -->
	<context:property-placeholder ignore-unresolvable="true" location="classpath:jeesite.properties" />
	
	<!-- Shiro权限过滤过滤器定义 -->
	<bean name="shiroFilterChainDefinitions" class="java.lang.String">
		<constructor-arg>
			<value><!--'short-circuit'    the first match wins-->
				/static/** = anon
				/userfiles/** = anon
				${adminPath}/cas = cas
				${adminPath}/login = authc
				${adminPath}/logout = logout
				${adminPath}/** = user
				/act/editor/** = user
				/ReportServer/** = user
			</value><!--
			〓〓〓anonymous filter即【AnonymousFilter】：
			Filter that allows access to a path immeidately without performing security checks of any kind.
			This filter is useful primarily in exclusionary policies,
			where you have defined a url pattern to require a certain security level, but maybe only subset of urls in that pattern should allow any access.

			For example,
			if you had a user-only section of a website,
			you might want to require that access to any url in that section must be from an authenticated user.

			Here is how that would look in the IniShiroFilter configuration:

			[urls]
			/user/** = authc

			But if you wanted /user/signup/** to be available to anyone,
			you have to exclude that path since it is a subset of the first.
			This is where the AnonymousFilter ('anon') is useful:

			[urls]
			/user/signup/** = anon
			/user/** = authc

			Since the url pattern definitions follow a 'first match wins' paradigm,
			the anon filter will match the /user/signup/** paths and the /user/** path chain will not be evaluated.

		   【CasFilter】并非默认提供，所以后面也有显式声明了此bean；然而现已Deprecated.    replaced with Shiro integration in buji-pac4j.
		   【CAS:Central Authentication Service 集中式认证服务，一种针对万维网的单点登录协议。
				 它的目的是允许一个用户访问多个应用程序，而只需提供一次凭证（如用户名和密码）。
				 它还允许web应用程序在没有获得用户的安全凭据（如密码）的情况下对用户进行身份验证。】
			This filter validates the CAS service ticket to authenticate the user. It must be configured on the URL recognized by the CAS server.
		   【】Deprecated. replaced with Shiro integration in buji-pac4j.
		   【扣：shiro reference doc 中 提到 shiro通过session clustering提供poor man’s SSO(single sign on)功能，此CasFilter是干啥的？】

			〓〓〓authc filter即【FormAuthenticationFilter】：
			Requires the requesting user to be authenticated for the request to continue, and
			if they are not, forces the user to login via by redirecting them to the loginUrl you configure.

			This filter constructs a UsernamePasswordToken with the values found in username, password, and rememberMe request parameters.
			It then calls Subject.login(usernamePasswordToken), effectively automatically performing a login attempt.
			Note that the login attempt will only occur when the isLoginSubmission(request,response) is true,
			which by default occurs when the request is for the loginUrl and is a POST request.

			If the login attempt fails, the resulting AuthenticationException fully qualified class name will be set as a request attribute under the failureKeyAttribute key.
			This FQCN can be used as an i18n key or lookup mechanism to explain to the user why their login attempt failed (e.g. no account, incorrect password, etc).

			If you would prefer to handle the authentication validation and login in your own code,
			consider using the PassThruAuthenticationFilter instead,
			which allows requests to the AccessControlFilter.loginUrl to pass through to your application's code directly.

			〓〓〓logout filter即【LogoutFilter】：
			Simple Filter that, upon receiving a request, (【扣】在地址栏直接输这个过滤器拦截的地址，也能一样logout喽？)
			will immediately log-out the currently executing subject and then redirect them to a configured redirectUrl.

			〓〓〓user filter即【UserFilter】：
			Filter that allows access to resources if the accessor is a known user, which is defined as having a known principal.
			This means that any user who is authenticated or remembered via a 'remember me' feature will be allowed access from this filter.
			If the accessor is not a known user, then they will be redirected to the loginUrl-->
		</constructor-arg>
	</bean>
	
	<!-- 安全认证过滤器 -->
	<!--【鸣】与web.xml中的"shiroFilter"凭同名对应，详细参看org.springframework.web.filter.DelegatingFilterProxy的文档-->
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<property name="securityManager" ref="securityManager" /><!-- 
		<property name="loginUrl" value="${cas.server.url}?service=${cas.project.url}${adminPath}/cas" /> -->
		<property name="loginUrl" value="${adminPath}/login" />
		<property name="successUrl" value="${adminPath}?login" /><!--【扣】感觉这个?后面的login query string (在LoginController中)没用上啊...-->
		<property name="filters">
            <map>
                <entry key="cas" value-ref="casFilter"/>
                <entry key="authc" value-ref="formAuthenticationFilter"/>
				<!--【鸣】↑authc和anon等filter一样都默认提供，为何显式？因为作者改写了FormAuthenticationFilter，继承了shiro的FormAuthenticationFilter。default filters，参见DefaultFilter API Doc
				    【ShiroFilterFactoryBean】This implementation is also a BeanPostProcessor and will acquire any Filter beans defined independently in your Spring application context.
				                              Upon discovery, they will be automatically added to the map keyed by the bean ID.
				    【猜】default filters(somehow)优先级次于Spring application context中的同名bean？或者说会被自定义的同名bean覆盖？-->
            </map>
        </property>
		<property name="filterChainDefinitions">
			<ref bean="shiroFilterChainDefinitions"/>
		</property>
	</bean>

	<!-- CAS认证过滤器 -->
	<bean id="casFilter" class="org.apache.shiro.cas.CasFilter"><!--【鸣】CasFilter不是默认提供，所以显式-->
		<property name="failureUrl" value="${adminPath}/login"/>
	</bean>
	
	<!-- 定义Shiro安全管理配置 -->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<property name="realm" ref="systemAuthorizingRealm" /><!--即作者thinkGem通过继承shiro的AuthorizingRealm得到的SystemAuthorizingRealm, 注为了@Service, 即bean了-->
		<property name="sessionManager" ref="sessionManager" />
		<property name="cacheManager" ref="shiroCacheManager" />
	</bean>
	
	<!-- 自定义会话管理配置 -->
	<bean id="sessionManager" class="com.thinkgem.jeesite.common.security.shiro.session.SessionManager"><!--extends shiro的 DefaultWebSessionManager-->
		<property name="sessionDAO" ref="sessionDAO"/>
		
		<!-- 会话超时时间，单位：毫秒  -->
		<property name="globalSessionTimeout" value="${session.sessionTimeout}"/>
		
		<!-- 定时清理失效会话, 清理用户直接关闭浏览器造成的孤立会话   -->
		<property name="sessionValidationInterval" value="${session.sessionTimeoutClean}"/>
<!--  		<property name="sessionValidationSchedulerEnabled" value="false"/> -->
 		<property name="sessionValidationSchedulerEnabled" value="true"/>
 		
		<property name="sessionIdCookie" ref="sessionIdCookie"/>
		<property name="sessionIdCookieEnabled" value="true"/>
	</bean>
	
	<!-- 指定本系统SESSIONID, 默认为: JSESSIONID 问题: 与SERVLET容器名冲突, 如JETTY, TOMCAT 等默认JSESSIONID,
		当跳出SHIRO SERVLET时如ERROR-PAGE容器会为JSESSIONID重新分配值导致登录会话丢失! -->
	<bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
	    <constructor-arg name="name" value="jeesite.session.id"/>
	</bean>

	<!-- 自定义Session存储容器 -->	<!--把JedisSessionDAO注释掉了啊，用的是自己custom的 CacheSessionDAO-->
<!-- 	<bean id="sessionDAO" class="com.thinkgem.jeesite.common.security.shiro.session.JedisSessionDAO"> -->
<!-- 		<property name="sessionIdGenerator" ref="idGen" /> -->
<!-- 		<property name="sessionKeyPrefix" value="${redis.keyPrefix}_session_" /> -->
<!-- 	</bean> -->
	<bean id="sessionDAO" class="com.thinkgem.jeesite.common.security.shiro.session.CacheSessionDAO"><!--extends shiro的EnterpriseCacheSessionDAO；implements 自己定义的SessionDAO(填了俩getActiveSessions的有参重载版本)-->
		<property name="sessionIdGenerator" ref="idGen" /><!--com.thinkgem.jeesite.common.utils.IdGen @Service-->
		<property name="activeSessionsCacheName" value="activeSessionsCache" />
		<property name="cacheManager" ref="shiroCacheManager" />
	</bean>
	
	<!-- 自定义系统缓存管理器-->
<!-- 	<bean id="shiroCacheManager" class="com.thinkgem.jeesite.common.security.shiro.cache.JedisCacheManager"> -->
<!-- 		<property name="cacheKeyPrefix" value="${redis.keyPrefix}_cache_" /> -->
<!-- 	</bean> -->

	<!--EhCacheManager: Shiro CacheManager implementation utilizing the Ehcache framework for all cache functionality.
		This class can accept a manually configured net.sf.ehcache.CacheManager instance, or
		                      an ehcache.xml path location can be specified instead and one will be constructed.
		If neither are specified, Shiro's failsafe ehcache.xml file will be used by default.
		This implementation requires EhCache 1.2 and above. Make sure EhCache 1.1 or earlier is not in the classpath or it will not work.
		Please see the Ehcache website for their documentation.-->
	<bean id="shiroCacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
		<property name="cacheManager" ref="cacheManager"/><!--spring-context.xml中配置了-->
	</bean>
	
	<!-- 保证 实现了Shiro内部lifecycle函数的bean 执行 -->
	<!--
	public class LifecycleBeanPostProcessor extends Object
											implements org.springframework.beans.factory.config.DestructionAwareBeanPostProcessor, org.springframework.core.PriorityOrdered【看源码 是LOWEST_PRECEDENCE 哦】
	Bean post processor for Spring that automatically calls the init() and/or destroy() methods on Shiro objects that implement the Initializable or Destroyable interfaces, respectfully.
	This post processor makes it easier to configure Shiro beans in Spring,
	since the user never has to worry about whether or not if they have to specify init-method and destroy-method bean attributes.

	Warning: This post processor has no way to determine if init() or destroy() have already been called,
			 so if you define this post processor in your applicationContext,
				do not also call these methods manually or via Spring's init-method or destroy-method bean attributes. -->
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>
	
	<!-- AOP式方法级权限检查  -->		<!--只要扫到advisor则 自动创建 合适的proxy【鸣】即 开启Shiro annotation-->
	<bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor">
		<property name="proxyTargetClass" value="true" />
		<!--ProxyConfig.proxyTargetClass
		public void setProxyTargetClass(boolean proxyTargetClass)
		Set whether to proxy the target class directly, instead of just proxying specific interfaces. Default is "false".
		Set this to "true" to force proxying for the TargetSource's exposed target class.
		If that target class is an interface, a JDK proxy will be created for the given interface.
		If that target class is any other class, a CGLIB proxy will be created for the given class.
		Note: Depending on the configuration of the concrete proxy factory,
		      the proxy-target-class behavior will also be applied if no interfaces have been specified (and no interface autodetection is activated).-->
	</bean>

	<!--extends org.springframework.aop.support.StaticMethodMatcherPointcutAdvisor【扣】没看懂，大概是这里负责将shiro annotation转译为advisor-->
	<bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
    	<property name="securityManager" ref="securityManager"/>
	</bean>
	
</beans>